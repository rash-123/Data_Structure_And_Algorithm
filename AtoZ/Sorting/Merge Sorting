https://takeuforward.org/plus/dsa/problems/merge-sorting

class Solution {
public:

    void mergeSort(int low, int mid, int high, vector<int>& nums){
        vector<int> ans;
        int left = low;
        int right = mid+1;

        while(left <= mid && right <= high){
            if(nums[left] <= nums[right]){
                ans.push_back(nums[left]);
                left++;
            }
            else{
                ans.push_back(nums[right]);
                right++;
            }
        }

        while(left <= mid){
            ans.push_back(nums[left]);
            left++;
        }

        while(right <= high){
            ans.push_back(nums[right]);
            right++;
        }

        for(int i = low; i <= high; i++){
            nums[i] = ans[i-low];
        }
    }

    void mergeSortHelper(int low, int high, vector<int>&nums){
        if(low >= high){
            return;
        }

        int mid = (low + high)/2;

        mergeSortHelper(low, mid, nums);
        mergeSortHelper(mid+1, high, nums);
        mergeSort(low, mid, high, nums);
    }
    vector<int> mergeSort(vector<int>& nums) {
        int n = nums.size();
        mergeSortHelper(0, n-1, nums);
        return nums;
    }
};
